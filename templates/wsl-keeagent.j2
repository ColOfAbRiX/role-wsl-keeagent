#!/bin/bash
### BEGIN INIT INFO
# Provides:           {{ wsl_keeagent_service }}
# Required-Start:     $syslog $remote_fs
# Required-Stop:      $syslog $remote_fs
# Should-Start:
# Should-Stop:
# Default-Start:      2 3 4 5
# Default-Stop:       0 1 6
# Short-Description:  WSL-KeeAgent integration service
# Description:
#  Integrates Keepass KeeAgent into Windows Subsystem for Linux by creating a tunnel from a Unit
#  socket to the msysgit socket provided by Keepass Keeagent
### END INIT INFO

export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

BASE={{ wsl_keeagent_service }}
DAEMON_BIN={{ wsl_keeagent_script_path }}/msysgit2unix-socket.py
DAEMON_DESC="$BASE"
DAEMON_PIDFILE=/var/run/msysgit2unix-socket.pid
DAEMON_LOGFILE="/var/log/$BASE.log"
DAEMON_OPTS="--timeout 3"

# Get lsb functions
source /lib/lsb/init-functions

# Check wsl-keeagent is present
if [ ! -x $DAEMON_BIN ]; then
    log_failure_msg "$DAEMON_BIN not present or not executable"
    exit 1
fi

fail_unless_root() {
    if [ "$(id -u)" != '0' ]; then
        log_failure_msg "$DAEMON_DESC must be run as root"
        exit 1
    fi
}

case "$1" in
    start)
        fail_unless_root
        log_begin_msg "Starting $DAEMON_DESC: $BASE"

        # Start the daemon
        $DAEMON_BIN \
            --pidfile $DAEMON_PIDFILE \
            $DAEMON_OPTS \
            {{ wsl_keeagent_msysgit_socket }}:{{ wsl_keeagent_ssh_agent_socket }} \
                >> "$DAEMON_LOGFILE" 2>&1
        result=$?

        log_end_msg $result
        exit $result
        ;;

    stop)
        fail_unless_root

        if [ -f "$DAEMON_PIDFILE" ]; then
            log_begin_msg "Stopping $DAEMON_DESC: $BASE"
            daemon_pid="$(cat $DAEMON_PIDFILE 2>/dev/null)"

            # Stop the process
            [ -n "$daemon_pid" ] && \
                ps -p $daemon_pid > /dev/null 2>&1 && \
                kill -SIGTERM $daemon_pid

            if [ -n "$daemon_pid" ] ; then
                # Test if still running
                ps -p $daemon_pid > /dev/null 2>&1
                result=$?
                # Removing PID file
                [ -f "$DAEMON_PIDFILE" ] && \
                    rm "$DAEMON_PIDFILE" > /dev/null 2>&1
            fi

            log_end_msg $result
            exit $result
        else
            log_warning_msg "$BASE already stopped - file $DAEMON_PIDFILE not found."
        fi
        ;;

    restart)
        fail_unless_root

        daemon_pid="$(cat $DAEMON_PIDFILE 2>/dev/null)"
        [ -n "$daemon_pid" ] && ps -p $daemon_pid > /dev/null 2>&1 && \
            $0 stop

        $0 start
        ;;

    status)
        status_of_proc -p "$DAEMON_PIDFILE" "$DAEMON_BIN" "$DAEMON_DESC"
        ;;

    *)
        echo "Usage: service $BASE {start|stop|restart|status}"
        exit 1
        ;;
esac

# vim: ft=sh:ts=4:sw=4
