#!/bin/bash
### BEGIN INIT INFO
# Provides:           {{ wsl_keeagent_service }}
# Required-Start:     $syslog $remote_fs
# Required-Stop:      $syslog $remote_fs
# Should-Start:
# Should-Stop:
# Default-Start:      2 3 4 5
# Default-Stop:       0 1 6
# Short-Description:  WSL-KeeAgent integration service
# Description:
#  Integrates Keepass KeeAgent into Windows Subsystem for Linux by creating a tunnel from a Unit
#  socket to the msysgit socket provided by Keepass Keeagent
### END INIT INFO

export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

BASE="{{ wsl_keeagent_service }}"
DAEMON_SCRIPT="{{ wsl_keeagent_script_name }}"
DAEMON_DESC="$BASE"
DAEMON_BIN="{{ wsl_keeagent_script_path }}/$DAEMON_SCRIPT"
DAEMON_PIDFILE="/var/run/{{ (wsl_keeagent_script_name | splitext)[0] }}.pid"
DAEMON_LOGFILE="/var/log/$BASE.log"
DAEMON_OPTS="--timeout 3"
MSYSGIT_PATH="{{ wsl_keeagent_msysgit_socket }}"
SOCKET_PATH="{{ wsl_keeagent_ssh_agent_socket }}"

# Get lsb functions
source /lib/lsb/init-functions

# Check wsl-keeagent is present
if [[ ! -x $DAEMON_BIN ]]; then
    log_failure_msg "$DAEMON_BIN not present or not executable"
    exit 1
fi

fail_unless_root() {
    if [[ "$(id -u)" != '0' ]]; then
        log_failure_msg "$DAEMON_DESC must be run as root"
        exit 1
    fi
}

case "$1" in
    start)
        fail_unless_root
        log_begin_msg "Starting $DAEMON_DESC: $BASE"

        # Discover pid from pidfile
        daemon_pid="$(cat $DAEMON_PIDFILE 2>/dev/null)"
        if [[ -n "$daemon_pid" || -f "$DAEMON_PIDFILE" || -S "$SOCKET_PATH" ]] ; then
            if [[ -n "$daemon_pid" && -f "$DAEMON_PIDFILE" && -S "$SOCKET_PATH" ]] ; then
                log_warning_msg "$BASE already running."
                exit 0

            else
                log_warning_msg "$BASE is in an unclean status. Cannot start."
                exit 1

            fi
        fi

        # Start the daemon
        $DAEMON_BIN \
            --pidfile $DAEMON_PIDFILE \
            $DAEMON_OPTS \
            "$MSYSGIT_PATH:$SOCKET_PATH" \
                >> "$DAEMON_LOGFILE" 2>&1
        sleep 1

        # Discover pid from pidfile
        daemon_pid="$(cat $DAEMON_PIDFILE 2>/dev/null)"
        if [[ -n "$daemon_pid" && -f "$DAEMON_PIDFILE" && -S "$SOCKET_PATH" ]] ; then
            log_success_msg "$BASE is running"
            exit 0
        else
            log_failure_msg "$BASE is NOT running"
            exit 1
        fi
        ;;

    stop)
        fail_unless_root
        log_begin_msg "Stopping $DAEMON_DESC: $BASE"

        if [[ -f "$DAEMON_PIDFILE" ]]; then
            # Discover pid from pidfile
            daemon_pid="$(cat $DAEMON_PIDFILE 2>/dev/null)"

            # Stop the process
            if [[ -n "$daemon_pid" ]] ; then
                ps -p $daemon_pid > /dev/null 2>&1
                kill -SIGTERM $daemon_pid && sleep 1
            fi

            # Try to discover the PID via a different route
            daemon_pid="$(pgrep -f $DAEMON_SCRIPT)"

            if [[ -n "$process_pid" ]]; then
                kill -SIGKILL $daemon_pid && sleep 1
                rm "$DAEMON_PIDFILE" "$SOCKET_PATH" > /dev/null 2>&1
            fi

            log_success_msg "$BASE is stopped."
            exit $result

        else
            # Try to discover the PID via a different route
            daemon_pid="$(pgrep -f $DAEMON_SCRIPT)"

            if [[ -n "$daemon_pid" ]]; then
                kill -SIGTERM $daemon_pid && sleep 1
                log_success_msg "$BASE is stopped."

            else
                log_warning_msg "$BASE already stopped."

            fi
        fi

        # Sometimes there are leftovers
        rm "$DAEMON_PIDFILE" "$SOCKET_PATH" > /dev/null 2>&1
        ;;

    restart)
        fail_unless_root

        daemon_pid="$(cat $DAEMON_PIDFILE 2>/dev/null)"
            [[ -n "$daemon_pid" ]] && ps -p $daemon_pid > /dev/null 2>&1 && \
            $0 stop

        $0 start
        ;;

    status)
        status_of_proc -p "$DAEMON_PIDFILE" "$DAEMON_BIN" "$DAEMON_DESC"
        ;;

    debug)
        shift
        /bin/bash -eux $0 $@
        ;;

    *)
        echo "Usage: service $BASE {start|stop|restart|status|debug <action>}"
        exit 1
        ;;
esac

# vim: ft=sh:ts=4:sw=4
